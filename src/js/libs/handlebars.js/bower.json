{
  "name": "handlebars.js",
  "version": "1.0.0",
  "main": "dist/handlebars.js",
  "ignore": [
    "node_modules",
    "components"
  ],
  "gitHead": "2a073e0993b40b81fbef82f681bb1dd171f2233b",
  "readme": "[![Build Status](https://travis-ci.org/wycats/handlebars.js.png?branch=master)](https://travis-ci.org/wycats/handlebars.js)\r\n\r\nHandlebars.js\r\n=============\r\n\r\nHandlebars.js is an extension to the [Mustache templating\r\nlanguage](http://mustache.github.com/) created by Chris Wanstrath.\r\nHandlebars.js and Mustache are both logicless templating languages that\r\nkeep the view and the code separated like we all know they should be.\r\n\r\nCheckout the official Handlebars docs site at\r\n[http://www.handlebarsjs.com](http://www.handlebarsjs.com).\r\n\r\n\r\nInstalling\r\n----------\r\nInstalling Handlebars is easy. Simply download the package [from the\r\nofficial site](http://handlebarsjs.com/) and add it to your web pages\r\n(you should usually use the most recent version).\r\n\r\nUsage\r\n-----\r\nIn general, the syntax of Handlebars.js templates is a superset\r\nof Mustache templates. For basic syntax, check out the [Mustache\r\nmanpage](http://mustache.github.com/mustache.5.html).\r\n\r\nOnce you have a template, use the `Handlebars.compile` method to compile\r\nthe template into a function. The generated function takes a context\r\nargument, which will be used to render the template.\r\n\r\n```js\r\nvar source = \"<p>Hello, my name is {{name}}. I am from {{hometown}}. I have \" +\r\n             \"{{kids.length}} kids:</p>\" +\r\n             \"<ul>{{#kids}}<li>{{name}} is {{age}}</li>{{/kids}}</ul>\";\r\nvar template = Handlebars.compile(source);\r\n\r\nvar data = { \"name\": \"Alan\", \"hometown\": \"Somewhere, TX\",\r\n             \"kids\": [{\"name\": \"Jimmy\", \"age\": \"12\"}, {\"name\": \"Sally\", \"age\": \"4\"}]};\r\nvar result = template(data);\r\n\r\n// Would render:\r\n// <p>Hello, my name is Alan. I am from Somewhere, TX. I have 2 kids:</p>\r\n// <ul>\r\n//   <li>Jimmy is 12</li>\r\n//   <li>Sally is 4</li>\r\n// </ul>\r\n```\r\n\r\n\r\nRegistering Helpers\r\n-------------------\r\n\r\nYou can register helpers that Handlebars will use when evaluating your\r\ntemplate. Here's an example, which assumes that your objects have a URL\r\nembedded in them, as well as the text for a link:\r\n\r\n```js\r\nHandlebars.registerHelper('link_to', function() {\r\n  return \"<a href='\" + this.url + \"'>\" + this.body + \"</a>\";\r\n});\r\n\r\nvar context = { posts: [{url: \"/hello-world\", body: \"Hello World!\"}] };\r\nvar source = \"<ul>{{#posts}}<li>{{{link_to}}}</li>{{/posts}}</ul>\"\r\n\r\nvar template = Handlebars.compile(source);\r\ntemplate(context);\r\n\r\n// Would render:\r\n//\r\n// <ul>\r\n//   <li><a href='/hello-world'>Hello World!</a></li>\r\n// </ul>\r\n```\r\n\r\nHelpers take precedence over fields defined on the context. To access a field\r\nthat is masked by a helper, a path reference may be used. In the example above\r\na field named `link_to` on the `context` object would be referenced using:\r\n\r\n```\r\n{{./link_to}}\r\n```\r\n\r\nEscaping\r\n--------\r\n\r\nBy default, the `{{expression}}` syntax will escape its contents. This\r\nhelps to protect you against accidental XSS problems caused by malicious\r\ndata passed from the server as JSON.\r\n\r\nTo explicitly *not* escape the contents, use the triple-mustache\r\n(`{{{}}}`). You have seen this used in the above example.\r\n\r\n\r\nDifferences Between Handlebars.js and Mustache\r\n----------------------------------------------\r\nHandlebars.js adds a couple of additional features to make writing\r\ntemplates easier and also changes a tiny detail of how partials work.\r\n\r\n### Paths\r\n\r\nHandlebars.js supports an extended expression syntax that we call paths.\r\nPaths are made up of typical expressions and . characters. Expressions\r\nallow you to not only display data from the current context, but to\r\ndisplay data from contexts that are descendants and ancestors of the\r\ncurrent context.\r\n\r\nTo display data from descendant contexts, use the `.` character. So, for\r\nexample, if your data were structured like:\r\n\r\n```js\r\nvar data = {\"person\": { \"name\": \"Alan\" }, company: {\"name\": \"Rad, Inc.\" } };\r\n```\r\n\r\nYou could display the person's name from the top-level context with the\r\nfollowing expression:\r\n\r\n```\r\n{{person.name}}\r\n```\r\n\r\nYou can backtrack using `../`. For example, if you've already traversed\r\ninto the person object you could still display the company's name with\r\nan expression like `{{../company.name}}`, so:\r\n\r\n```\r\n{{#person}}{{name}} - {{../company.name}}{{/person}}\r\n```\r\n\r\nwould render:\r\n\r\n```\r\nAlan - Rad, Inc.\r\n```\r\n\r\n### Strings\r\n\r\nWhen calling a helper, you can pass paths or Strings as parameters. For\r\ninstance:\r\n\r\n```js\r\nHandlebars.registerHelper('link_to', function(title, options) {\r\n  return \"<a href='/posts\" + this.url + \"'>\" + title + \"!</a>\"\r\n});\r\n\r\nvar context = { posts: [{url: \"/hello-world\", body: \"Hello World!\"}] };\r\nvar source = '<ul>{{#posts}}<li>{{{link_to \"Post\"}}}</li>{{/posts}}</ul>'\r\n\r\nvar template = Handlebars.compile(source);\r\ntemplate(context);\r\n\r\n// Would render:\r\n//\r\n// <ul>\r\n//   <li><a href='/posts/hello-world'>Post!</a></li>\r\n// </ul>\r\n```\r\n\r\nWhen you pass a String as a parameter to a helper, the literal String\r\ngets passed to the helper function.\r\n\r\n\r\n### Block Helpers\r\n\r\nHandlebars.js also adds the ability to define block helpers. Block\r\nhelpers are functions that can be called from anywhere in the template.\r\nHere's an example:\r\n\r\n```js\r\nvar source = \"<ul>{{#people}}<li>{{#link}}{{name}}{{/link}}</li>{{/people}}</ul>\";\r\nHandlebars.registerHelper('link', function(options) {\r\n  return '<a href=\"/people/' + this.id + '\">' + options.fn(this) + '</a>';\r\n});\r\nvar template = Handlebars.compile(source);\r\n\r\nvar data = { \"people\": [\r\n    { \"name\": \"Alan\", \"id\": 1 },\r\n    { \"name\": \"Yehuda\", \"id\": 2 }\r\n  ]};\r\ntemplate(data);\r\n\r\n// Should render:\r\n// <ul>\r\n//   <li><a href=\"/people/1\">Alan</a></li>\r\n//   <li><a href=\"/people/2\">Yehuda</a></li>\r\n// </ul>\r\n```\r\n\r\nWhenever the block helper is called it is given one or more parameters,\r\nany arguments that are passed in the helper in the call and an `options`\r\nobject containing the `fn` function which executes the block's child.\r\nThe block's current context may be accessed through `this`.\r\n\r\nBlock helpers have the same syntax as mustache sections but should not be\r\nconfused with one another. Sections are akin to an implicit `each` or\r\n`with` statement depending on the input data and helpers are explicit\r\npieces of code that are free to implement whatever behavior they like.\r\nThe [mustache spec](http://mustache.github.io/mustache.5.html)\r\ndefines the exact behavior of sections. In the case of name conflicts,\r\nhelpers are given priority.\r\n\r\n### Partials\r\n\r\nYou can register additional templates as partials, which will be used by\r\nHandlebars when it encounters a partial (`{{> partialName}}`). Partials\r\ncan either be String templates or compiled template functions. Here's an\r\nexample:\r\n\r\n```js\r\nvar source = \"<ul>{{#people}}<li>{{> link}}</li>{{/people}}</ul>\";\r\n\r\nHandlebars.registerPartial('link', '<a href=\"/people/{{id}}\">{{name}}</a>')\r\nvar template = Handlebars.compile(source);\r\n\r\nvar data = { \"people\": [\r\n    { \"name\": \"Alan\", \"id\": 1 },\r\n    { \"name\": \"Yehuda\", \"id\": 2 }\r\n  ]};\r\n\r\ntemplate(data);\r\n\r\n// Should render:\r\n// <ul>\r\n//   <li><a href=\"/people/1\">Alan</a></li>\r\n//   <li><a href=\"/people/2\">Yehuda</a></li>\r\n// </ul>\r\n```\r\n\r\n### Comments\r\n\r\nYou can add comments to your templates with the following syntax:\r\n\r\n```js\r\n{{! This is a comment }}\r\n```\r\n\r\nYou can also use real html comments if you want them to end up in the output.\r\n\r\n```html\r\n<div>\r\n    {{! This comment will not end up in the output }}\r\n    <!-- This comment will show up in the output -->\r\n</div>\r\n```\r\n\r\n\r\nPrecompiling Templates\r\n----------------------\r\n\r\nHandlebars allows templates to be precompiled and included as javascript\r\ncode rather than the handlebars template allowing for faster startup time.\r\n\r\n### Installation\r\nThe precompiler script may be installed via npm using the `npm install -g handlebars`\r\ncommand.\r\n\r\n### Usage\r\n\r\n<pre>\r\nPrecompile handlebar templates.\r\nUsage: handlebars template...\r\n\r\nOptions:\r\n  -a, --amd        Create an AMD format function (allows loading with RequireJS)         [boolean]\r\n  -f, --output     Output File                                                           [string]\r\n  -k, --known      Known helpers                                                         [string]\r\n  -o, --knownOnly  Known helpers only                                                    [boolean]\r\n  -m, --min        Minimize output                                                       [boolean]\r\n  -s, --simple     Output template function only.                                        [boolean]\r\n  -r, --root       Template root. Base value that will be stripped from template names.  [string]\r\n</pre>\r\n\r\nIf using the precompiler's normal mode, the resulting templates will be\r\nstored to the `Handlebars.templates` object using the relative template\r\nname sans the extension. These templates may be executed in the same\r\nmanner as templates.\r\n\r\nIf using the simple mode the precompiler will generate a single\r\njavascript method. To execute this method it must be passed to the using\r\nthe `Handlebars.template` method and the resulting object may be as\r\nnormal.\r\n\r\n### Optimizations\r\n\r\n- Rather than using the full _handlebars.js_ library, implementations that\r\n  do not need to compile templates at runtime may include _handlebars.runtime.js_\r\n  whose min+gzip size is approximately 1k.\r\n- If a helper is known to exist in the target environment they may be defined\r\n  using the `--known name` argument may be used to optimize accesses to these\r\n  helpers for size and speed.\r\n- When all helpers are known in advance the `--knownOnly` argument may be used\r\n  to optimize all block helper references.\r\n\r\nSupported Environments\r\n----------------------\r\n\r\nHandlebars has been designed to work in any ECMAScript 3 environment. This includes\r\n\r\n- Node.js\r\n- Chrome\r\n- Firefox\r\n- Safari 5+\r\n- Opera 11+\r\n- IE 6+\r\n\r\nOlder versions and other runtimes are likely to work but have not been formally\r\ntested.\r\n\r\nPerformance\r\n-----------\r\n\r\nIn a rough performance test, precompiled Handlebars.js templates (in\r\nthe original version of Handlebars.js) rendered in about half the\r\ntime of Mustache templates. It would be a shame if it were any other\r\nway, since they were precompiled, but the difference in architecture\r\ndoes have some big performance advantages. Justin Marney, a.k.a.\r\n[gotascii](http://github.com/gotascii), confirmed that with an\r\n[independent test](http://sorescode.com/2010/09/12/benchmarks.html). The\r\nrewritten Handlebars (current version) is faster than the old version,\r\nand we will have some benchmarks in the near future.\r\n\r\n\r\nBuilding\r\n--------\r\n\r\nTo build handlebars, just run `rake release`, and you will get two files\r\nin the `dist` directory.\r\n\r\n\r\nUpgrading\r\n---------\r\n\r\nSee [release-notes.md](https://github.com/wycats/handlebars.js/blob/master/release-notes.md) for upgrade notes.\r\n\r\nKnown Issues\r\n------------\r\n* Handlebars.js can be cryptic when there's an error while rendering.\r\n* Using a variable, helper, or partial named `class` causes errors in IE browsers. (Instead, use `className`)\r\n\r\nHandlebars in the Wild\r\n-----------------\r\n* [jblotus](http://github.com/jblotus) created [http://tryhandlebarsjs.com](http://tryhandlebarsjs.com)\r\n  for anyone who would like to try out Handlebars.js in their browser.\r\n* Don Park wrote an Express.js view engine adapter for Handlebars.js called\r\n  [hbs](http://github.com/donpark/hbs).\r\n* [sammy.js](http://github.com/quirkey/sammy) by Aaron Quint, a.k.a. quirkey,\r\n  supports Handlebars.js as one of its template plugins.\r\n* [SproutCore](http://www.sproutcore.com) uses Handlebars.js as its main\r\n  templating engine, extending it with automatic data binding support.\r\n* [Ember.js](http://www.emberjs.com) makes Handlebars.js the primary way to\r\n  structure your views, also with automatic data binding support.\r\n* Les Hill (@leshill) wrote a Rails Asset Pipeline gem named\r\n  [handlebars_assets](http://github.com/leshill/handlebars_assets).\r\n* [Gist about Synchronous and asynchronous loading of external handlebars templates](https://gist.github.com/2287070)\r\n* [Lumbar](walmartlabs.github.io/lumbar) provides easy module-based template management for handlebars projects.\r\n* [YUI](http://yuilibrary.com/yui/docs/handlebars/) implements a port of handlebars\r\n\r\nHave a project using Handlebars? Send us a [pull request](https://github.com/wycats/handlebars.js/pull/new/master)!\r\n\r\nHelping Out\r\n-----------\r\nTo build Handlebars.js you'll need a few things installed.\r\n\r\n* Node.js\r\n* Ruby\r\n* therubyracer, for running tests - `gem install therubyracer`\r\n* rspec, for running tests - `gem install rspec`\r\n\r\nThere's a Gemfile in the repo, so you can run `bundle` to install rspec\r\nand therubyracer if you've got bundler installed.\r\n\r\nTo build Handlebars.js from scratch, you'll want to run `rake compile`\r\nin the root of the project. That will build Handlebars and output the\r\nresults to the dist/ folder. To run tests, run `rake test`. You can also\r\nrun our set of benchmarks with `rake bench`. Node tests can be run with\r\n`npm test` or `rake npm_test`. The default rake target will compile and\r\nrun both test suites.\r\n\r\nSome environments, notably Windows, have issues running therubyracer. Under these\r\nenvrionments the `rake compile` and `npm test` should be sufficient to test\r\nmost handlebars functionality.\r\n\r\nIf you notice any problems, please report them to the GitHub issue tracker at\r\n[http://github.com/wycats/handlebars.js/issues](http://github.com/wycats/handlebars.js/issues).\r\nFeel free to contact commondream or wycats through GitHub with any other\r\nquestions or feature requests. To submit changes fork the project and\r\nsend a pull request.\r\n\r\nLicense\r\n-------\r\nHandlebars.js is released under the MIT license.\r\n\r\n",
  "readmeFilename": "README.markdown",
  "_id": "handlebars.js@1.0.0",
  "description": "[![Build Status](https://travis-ci.org/wycats/handlebars.js.png?branch=master)](https://travis-ci.org/wycats/handlebars.js)",
  "repository": {
    "type": "git",
    "url": "git://github.com/wycats/handlebars.js.git"
  }
}